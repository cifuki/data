215
Q:I am getting a warning in my code that states:


  This\xc2\xa0AsyncTask\xc2\xa0class\xc2\xa0should\xc2\xa0be\xc2\xa0static\xc2\xa0or\xc2\xa0leaks\xc2\xa0might\xc2\xa0occur\xc2\xa0(anonymous\xc2\xa0android.os.AsyncTask)


The complete warning is:


  This\xc2\xa0AsyncTask\xc2\xa0class\xc2\xa0should\xc2\xa0be\xc2\xa0static\xc2\xa0or\xc2\xa0leaks\xc2\xa0might\xc2\xa0occur\xc2\xa0(anonymous\xc2\xa0android.os.AsyncTask) 
  A static field will leak contexts.  Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a Fragment or Activity, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.  Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.  ViewModel classes should never point to Views or non-application Contexts.


This is my code:

 new AsyncTask<Void,Void,Void>(){

        @Override
        protected Void doInBackground(Void... params) {
            runOnUiThread(new Runnable() {

                @Override
                public void run() {
                    mAdapter.notifyDataSetChanged();
                }
            });

            return null;
        }
    }.execute();


How do I correct this?
    
===============================================================================================
49
A:Non-static inner classes holds a reference to the containing class. When you declare AsyncTask as an inner class, it might live longer than the containing Activity class. This is because of the implicit reference to the containing class. This will prevent the activity from being garbage collected, hence the memory leak.

To solve your problem, either use static nested class instead of anonymous, local, and inner class or use top-level class.
    