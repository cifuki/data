33
Q:I'm learning about using Custom Views from the following:

http://developer.android.com/guide/topics/ui/custom-components.html#modifying

The description says:


  Class Initialization  As always, the
  super is called first. Furthermore,
  this is not a default constructor, but
  a parameterized one. The EditText is
  created with these parameters when it
  is inflated from an XML layout file,
  thus, our constructor needs to both
  take them and pass them to the
  superclass constructor as well.


Is there a better description?  I've been trying to figure out what the constructor(s) should look like and I've come up with 4 possible choices (see example at end of post).  I'm not sure what these 4 choices do (or don't do), why I should implement them, or what the parameters mean.  Is there a description of these?  

public MyCustomView()
{
    super();
}

public MyCustomView(Context context)
{
    super(context);
}

public MyCustomView(Context context, AttributeSet attrs)
{
    super(context, attrs);
} 

public MyCustomView(Context context, AttributeSet attrs, Map params)
{
    super(context, attrs, params);
} 

    
===============================================================================================
65
A:You don't need the first one, as that just won't work.

The third one will mean your custom View will be usable from XML layout files. If you don't care about that, you don't need it.

The fourth one is just wrong, AFAIK. There is no View constructor that take a Map as the third parameter. There is one that takes an int as the third parameter, used to override the default style for the widget.

I tend to use the this() syntax to combine these:

public ColorMixer(Context context) {
    this(context, null);
}

public ColorMixer(Context context, AttributeSet attrs) {
    this(context, attrs, 0);
}

public ColorMixer(Context context, AttributeSet attrs, int defStyle) {
    super(context, attrs, defStyle);
    // real work here
}


You can see the rest of this code in this book example.
    