31
Q:I always use ViewHolder pattern in my custom ArrayAdapter classes. However, in CursorAdapter the getView() method is not mandatory required to be overridden , but has the bindView and newView methods.

My question is - does CursorAdapter re-uses views by internally implementing the ViewHolder pattern or it needs to be coded as we normally do in custom ArrayAdapter? If it needs to be coded, what is the correct way to do it?

Update

I'm using android.support.v4.widget.CursorAdapter
    
===============================================================================================
40
A:My question is - does CursorAdapter re-uses views by internally
  implementing the ViewHolder pattern or it needs to be coded as we
  normally do in custom ArrayAdapter?


I'm not sure at what do you refer by the ViewHolder pattern. If you are referring to having a helper class to cache looking for view each time(and setting it as a tag for the row View) then the answer is no. If you want to implement this pattern you'll need to setup the holder(look for the views in the row view with findViewById) in the newView method and then set it as the tag for the row view. Then in the bindView method you can call getTag, retrieve the holder and use it. An example:

// custom CursorAdapter ...

    @Override
    public View newView(Context context, Cursor cursor, ViewGroup parent) {
        View rowView = ((LayoutInflater) context
                .getSystemService("layout_inflater")).inflate(
                R.layout.row_layout, parent, false);
        ViewHolder holder = new ViewHolder();
        holder.v1 = rowView.findViewById(R.id.v1);
        holder.v2 = rowView.findViewById(R.id.v2);
        rowView.setTag(holder);
        return rowView;
    }

    @Override
    public void bindView(View view, Context context, Cursor cursor) {
        ViewHolder holder = (ViewHolder) view.getTag();
        // use the holder filled with views
        // hlder.v1.setSomething
    }

    class ViewHolder {
        View v1, v2;
    }
// ...


If you are referring to the convertView being reused(like in non Cursor based adapters) then the answer is yes, the getView method implements this pattern, you just need to implement the newView and bindView methods and you're guaranteed to get a view which was recycled(if possible at that moment).
    