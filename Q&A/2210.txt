91
Q:Can anyone tell me if there's any difference between using runOnUiThread() versus Looper.getMainLooper().post() to execute a task on the UI thread in Android??

About the only thing I can determine is that since runOnUiThread is a non-static Activity method, Looper.getMainLooper().post() is more convenient when you need to code something in a class that can't see the Activity (such as an interface).

I'm not looking for a discussion on WHETHER something should be executed on the UI thread, I get that some things can't and a great many things shouldn't, however some things (like starting up an AsyncTask) MUST be executed from the UI thread.

Thanks,
R.
    
===============================================================================================
179
A:The following behaves the same when called from background threads:


using Looper.getMainLooper()

Runnable task = getTask();
new Handler(Looper.getMainLooper()).post(task);

using Activity#runOnUiThread()

Runnable task = getTask();
runOnUiThread(task);



The only difference is when you do that from the UI thread since 

public final void runOnUiThread(Runnable action) {
    if (Thread.currentThread() != mUiThread) {
        mHandler.post(action);
    } else {
        action.run();
    }
}


will check if the current Thread is already the UI thread and then execute it directly. Posting it as a message will delay the execution until you return from the current UI-thread method.

There is also a third way to execute a Runnable on the UI thread which would be View#post(Runnable) - this one will always post the message even when called from the UI thread. That is useful since that will ensure that the View has been properly constructed and has a layout before the code is executed.
    