29
Q:I was going through Bound Service in Android Developer website. I thought I understood the service enough but I just found another way of connecting service through Using a Messenger class especially for local service. There I got confused. Maybe I got the concept wrong.

Here is my understanding of Android Service. You create a service when


You want to do separate jobs in the background.
You want to make it a separate process.
You want to make it run in a lifecycle that's independent of the component that started it. 


Confusion is the first item in the list, the definition of the background. Isn't the background a thread or process? I never thought that it can run on the main thread.

Here is the caution of service in the dev pages about.


  Caution: A service runs in the main thread of its hosting process\xe2\x80\x94the service does not create its own thread and does not run in a separate process (unless you specify otherwise). This means that, if your service is going to do any CPU intensive work or blocking operations (such as MP3 playback or networking), you should create a new thread within the service to do that work. By using a separate thread, you will reduce the risk of Application Not Responding (ANR) errors and the application's main thread can remain dedicated to user interaction with your activities.


Questions


Why does one choose to use service if the service function will anyway run on the main thread? 
Do we have to write a service only to block ANR even if the time-consuming job is done in the main thread? Assume the service is only for my application. 
Are there any practical cases or reasons to use a service as private and running in the same thread?

    
===============================================================================================
31
A:Application main thread is not always the UI thread. For example, when Activity is stopped, the onStop() is invoked, hence the UI thread is taken away from that Activity and moved to another Activity within the same or a different application. However it doesn't mean the application is no longer active, it can continue working in the background until it is closed either by OS or by user. Then who keeps it running in the background? It is the main thread and not the UI thread.

What are services 


  In Android, a Service is an application component that can perform
  long-running operations in the background on the UI thread. By
  background, it means that it doesn\xe2\x80\x99t have a user interface. A Service
  runs on the main thread of the calling Component\xe2\x80\x99s process by default
  (and hence can degrade responsiveness and cause ANRs), hence you
  should create a new Thread to perform long running operations. A
  Service can also be made to run in a completely different process.
  
  Unlike Activity components, Services do not have any graphical
  interfaces. Also Broadcast Receivers are for receiving broadcast
  messages (broadcast, multicast, unicast) and perform short tasks
  whereas Services are meant to do lengthy processing like streaming
  music, network transactions, file I/O, interact with databases, etc.
  When a Service is started by an application component like an Activity
  it runs in the background and keeps running even if the user switches
  to another application or the starting component is itself destroyed


Why use service 


  Services are given higher priority than other Background processes and
  hence it\xe2\x80\x99s less likely that Android will terminate it. Although it can
  be configured to restart once there is ample resources available
  again. You should go through the different processes and their
  priority/important level in the documentation on processes and
  threads. Assigning them the same priority as foreground activities is
  definitely possible in which case it\xe2\x80\x99ll need to have a visible
  notification active (generally used for Services playing music).


Use IntentService if you don't want to fiddle with managing threads on your own. Otherwise, use AsyncTasks.

Please read this excellent article to understand more in detail and also read this answer.
    