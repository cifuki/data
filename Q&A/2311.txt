88
Q:I call multiple Handlers by new Handler().postDelayed(new Runnable().....
How can I stop it, if I click on return button? 

 public class Tag1 extends Oberklasse implements OnClickListener {

public Button btn;
//private Handler myHandler = new Handler();
Handler handler;
Runnable myRunnable;




@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.tt1);
    //Bildschirm soll anbleiben!!!
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

    //Lautst\xc3\xa4rke BUttons enable
    setVolumeControlStream(AudioManager.STREAM_MUSIC);





    getActionBar().setTitle("Tag 1");
    getActionBar().setDisplayHomeAsUpEnabled(true); 


    //tt1.xml beschriften
    TextView textView = (TextView)findViewById(R.id.uebung1);
    textView.setText("\xc3\x9cbung 1:");

    TextView textView2 = (TextView)findViewById(R.id.uebung2);
    textView2.setText("\xc3\x9cbung 2:");

    TextView textView3 = (TextView)findViewById(R.id.uebung3);
    textView3.setText("\xc3\x9cbung 3:");

    TextView textView4 = (TextView)findViewById(R.id.uebung4);
    textView4.setText("\xc3\x9cbung 4:");

    TextView textView5 = (TextView)findViewById(R.id.uebung5);
    textView5.setText("\xc3\x9cbung 5:");

    TextView textView6 = (TextView)findViewById(R.id.uebung6);
    textView6.setText("\xc3\x9cbung 6:");

    TextView textView7 = (TextView)findViewById(R.id.uebung7);
    textView7.setText("\xc3\x9cbung 7:");






    //Button finden und Initialisieren!
    btn = (Button) findViewById(R.id.trainingsstart);
    btn.setOnClickListener(this);

}

@Override
public void onClick(View v) {





    Crunch();

    Handler handler=  new Handler();
    Runnable myRunnable = new Runnable() {
    public void run() {
        UnterarmLiegest\xc3\xbctz1();
    }
    };
    handler.postDelayed(myRunnable,3000);

}

@Override 
public void onBackPressed() { 
    super.onBackPressed();
    uebung.stop();
    handler.removeCallbacks(myRunnable);

}






}


I have the problem that my Handlers haven't a name like "myHandler" . How can I handle it?
THanks for help!

Now I got these error:

03-28 17:47:03.662: E/AndroidRuntime(1961): FATAL EXCEPTION: main
03-28 17:47:03.662: E/AndroidRuntime(1961): java.lang.NullPointerException
03-28 17:47:03.662: E/AndroidRuntime(1961):     at de.basti12354.tage.uebungen.Tag1.onBackPressed(Tag1.java:120)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.app.Activity.onKeyUp(Activity.java:2159)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.view.KeyEvent.dispatch(KeyEvent.java:2647)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.app.Activity.dispatchKeyEvent(Activity.java:2389)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at com.android.internal.policy.impl.PhoneWindow$DecorView.dispatchKeyEvent(PhoneWindow.java:1860)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.view.ViewRootImpl$ViewPostImeInputStage.processKeyEvent(ViewRootImpl.java:3791)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:3774)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3379)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3429)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3398)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:3483)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3406)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:3540)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3379)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3429)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3398)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3406)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3379)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3429)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3398)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:3516)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.view.ViewRootImpl$ImeInputStage.onFinishedInputEvent(ViewRootImpl.java:3666)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.view.inputmethod.InputMethodManager$PendingEvent.run(InputMethodManager.java:1982)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.view.inputmethod.InputMethodManager.invokeFinishedInputEventCallback(InputMethodManager.java:1698)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.view.inputmethod.InputMethodManager.finishedInputEvent(InputMethodManager.java:1689)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.view.inputmethod.InputMethodManager$ImeInputEventSender.onInputEventFinished(InputMethodManager.java:1959)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.view.InputEventSender.dispatchInputEventFinished(InputEventSender.java:141)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.os.MessageQueue.nativePollOnce(Native Method)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.os.MessageQueue.next(MessageQueue.java:132)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.os.Looper.loop(Looper.java:124)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at android.app.ActivityThread.main(ActivityThread.java:5103)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at java.lang.reflect.Method.invokeNative(Native Method)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at java.lang.reflect.Method.invoke(Method.java:525)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:737)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:553)
03-28 17:47:03.662: E/AndroidRuntime(1961):     at dalvik.system.NativeStart.main(Native Method)

    
===============================================================================================
167
A:You can use:

 Handler handler = new Handler()
 handler.postDelayed(new Runnable())


Or you can use:

 handler.removeCallbacksAndMessages(null);


Docs


  public final void removeCallbacksAndMessages (Object token)
  
  Added in API level 1 Remove any pending posts of callbacks and sent
  messages whose obj is token. If token is null, all callbacks and
  messages will be removed.


Or you could also do like the following:

Handler handler=  new Handler()
Runnable myRunnable = new Runnable() {
public void run() {
    // do something
}
};
handler.postDelayed(myRunnable,zeit_dauer2);


Then:

handler.removeCallbacks(myRunnable);


Docs


  public final void removeCallbacks (Runnable r)
  
  Added in API level 1 Remove any pending posts of Runnable r that are
  in the message queue.
  
  public final void removeCallbacks (Runnable r, Object token)


Edit:

Change this:

@Override
public void onClick(View v) {
Crunch();
Handler handler=  new Handler();
Runnable myRunnable = new Runnable() {


To:

@Override
public void onClick(View v) {
Crunch();
handler=  new Handler();
myRunnable = new Runnable() { /* ... */}


Because you have the below. Declared before onCreate but you re-declared and then initialized it in onClick leading to a NPE.

Handler handler; // declared before onCreate
Runnable myRunnable;

    