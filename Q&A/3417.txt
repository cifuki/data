66
Q:This question already has an answer here:
    
        
            What is the benefit of using Fragments in Android, rather than Views?
                
                    6 answers
                
        
    
    
What is the advantage to using Fragments over using custom Views that are reused in different layouts?

In the original blog post introducing fragments, Dianne Hackborn says that 


  [Fragments] make it easier for developers to write applications that can scale
  across a variety of screen sizes, beyond the facilities already
  available in the platform.


and she goes on to explain Fragments in the context of making a tablet layout for an app that combines the UI of two activities from the phone version of the same app.

But it seems that the same reuse could be achieved using custom Views.  The main different between Fragments and Views seems to be that they have differing lifecycles...  

The Fragment lifecycle is:

onAttach(), onCreate(), onCreateView(), onActivityCreated(), onStart(), onResume(), onPause(), onStop(), onDestroyView(), onDestroy(), onDetatch().

The View lifecycle is:

ctor, onFinishInflate(), onAttachedToWindow(), onMeasure(), onLayout(), onDetatchedFromWindow()

I'd like to hear from developers with experience writing large apps about what benefits (if any) they've seen in using Fragments vs custom Views to divide up the UI into reusable pieces.
    
===============================================================================================
55
A:The main reason is that fragments are more reusable than custom views.

Sometimes you can't create a fully encapsulated UI component relying on views alone. This is because there are things you would want to put into your view but can't because only an Activity can handle them, thus forcing tight coupling between an Activity and a View.

Here is one such example. Lets say you want to create a reusable UI component that, among many things, want to capture a photo and do something with it. Traditionally you would fire an intent that starts the camera and returns with the captured image.

Notice that your custom UI component can't fully encapsulate this functionality because it will have to rely on hosting Activity's startActivityForResult because views don't accept activity results (they can indirectly fire an intent through context).

Now if you wanted to reuse your custom UI component in different activities you would be repeating the code for Activity.startActivityForResult.

Fragment on the other hand cleanly solve this problem. 

Similarly your fragment can contribute items to your options menu, something traditionally only an Activity could do. Again this could be important if the state of your custom view dictates what goes in the menu.
    