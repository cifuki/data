78
Q:This seems like a basic question, but I couldn't find a similar one on SO. While reading the documentation, I was having trouble grasping the concepts. I want to understand what the difference is between top and ascent and also bottom and descent. And where exactly is the baseline? Do you have a diagram to help me visualize it?
    
===============================================================================================
240
A:Let's first review what the documentation says:


Top - The maximum distance above the baseline for the tallest glyph in the font at a given text size. 
Ascent - The recommended distance above the baseline for singled spaced text. 
Descent - The recommended distance below the baseline for singled spaced text. 
Bottom - The maximum distance below the baseline for the lowest glyph in the font at a given text size. 
Leading - The recommended additional space to add between lines of text. 


Note that the Baseline is what the first four are measured from. It is line which forms the base that the text sits on, even though some characters (like g, y, j, etc.) might have parts that go below the line. It is comparable to the lines you write on in a lined notebook. 

Here is a picture to help visualize these things:



Remember that when drawing on a canvas in Java and Android, going down is an increase in y and going up is a decrease in y. That means that FontMetrics' top and ascent are negative numbers since they are measured from the baseline (while descent and bottom are positive numbers). Thus, to get the distance from top to bottom you would need to do (bottom - top).

The leading is the distance between the bottom of one line and the top of the next line. In the picture above, it is the space between the orange of Line 1 and the purple of Line 2. As @MajorTom noted below, in typography the term is more properly defined as "the distance between the baselines of successive lines of type."* However, Android seems to use the term in the more historical sense. The word (pronounced "ledding") comes from the lead strip that the old typesetters used to put between lines of type. It was basically just a way to adjust the line spacing. In Android I've never actually seen the leading be anything other than 0 and I haven't seen it used for anything in the source code. (Correct me if you know where it is used to calculate anything.) You can change the line spacing in a TextView with setLineSpacing in code or android:lineSpacingExtra and android:lineSpacingMultiplier in xml. These methods, however, do not make use of or modify the leading.

Check out these links for more information:


Precise Android Text Drawing
Font Metrics in Java (and Android)
Layout documentation
Java: FontMetrics ascent incorrect?
FontMetrics not correct when run on android device. Simulator fine
Java Font Metrics (Java doesn't seem to use top and bottom)


Explore more

In order to explore Font Metrics more, I made a simple project.



Rather than listing all the code here. I added the project to GitHub. You can either clone the project, or copy the following files into a new project.


FontMetricsView.java (a custom view)
MainActivity.java
activity_main.xml


Do letters ever go above top or below bottom?

Not usually, but they could. Top and bottom, as I understand them, are set by the font (hence "FontMetrics"), so a font maker could make a glyph go higher than whatever they say the top is (or lower than the bottom). Also, with combining diacritical marks in Unicode it can very easily happen. Here is a rather extreme example (taken from here): M\xcc\xb5\xcc\xb3\xcc\x99\xcd\x94\xcc\x9f\xcc\xb1\xcd\x95\xcc\x93\xcc\x80\xcc\x84\xcc\x89\xcc\x85\xcd\xa7\xcc\x8b\xcd\x8a\xcd\x8c\xcd\x91\xcc\x81\xcd\x8c\xcd\xaa\xcc\x92\xcc\xbf\xcc\x80\xcc\x9aa\xcd\x94\xcc\x9f\xcc\x9d\xcd\x94\xcd\xa5\xcc\x88\xcc\x81\xcc\x8f\xcd\xae\xcd\xaf\xcc\x87\xcd\x86\xcc\x8a\xcc\x92\xcd\xa6\xcd\xa6\xcd\x98\xcd\xa2\xcd\x9cy\xcc\xb5\xcc\xb4\xcc\xa2\xcd\x95\xcc\x9d\xcc\xa9\xcc\xb1\xcd\x88\xcd\x95\xcc\xbc\xcc\xa3\xcd\x95\xcc\x9f\xcc\x8c\xcd\x97\xcc\xbe\xcd\xa4\xcc\x8e\xcd\x8c\xcc\x84\xcd\xa3\xcd\xa8\xcd\x8a\xcd\xacb\xcc\xa1\xcc\xaf\xcc\xb0\xcc\xaa\xcc\x9c\xcd\x99\xcc\x9f\xcc\x9d\xcc\xa0\xcd\x9a\xcc\x9c\xcc\xa5\xcc\x99\xcc\xa4\xcc\x83\xcd\xa8\xcc\x8b\xcc\x92\xcc\x92\xcc\x8a\xcd\xa7\xcd\xa4\xcd\x90\xcc\x93\xcd\x8b\xcc\x8c\xcc\xbe\xcc\x87\xcc\x94\xcc\x88\xcc\x81\xcc\x80\xcc\x81\xcd\xa1\xcd\xa0e\xcc\xb5\xcd\xaf\xcd\xaa\xcc\xbf\xcc\xbf\xcc\x82\xcc\x84\xcd\xab\xcc\x83\xd2\x89\xcd\x8f\xcd\x8e\xcc\xa3\xcc\xb9\xcc\xb1\xcc\x9c\xcd\x89\xcc\xa6\xcc\x9e\xcc\xaa\xcc\x98\xcc\xa0\xcc\x9d\xcc\x9d\xcd\x8d\xcc\xbc\xcc\x9c\xcc\x96\xcc\xa5\xcc\xad\xcd\x9f \xcc\xa3\xcc\x9e\xcd\x99\xcd\x9a\xcc\x9d\xcc\xb0\xcc\x9e\xcc\xb9\xcc\x97\xcc\xb2\xcc\xa3\xcd\x99\xcd\x8d\xcd\x8d\xcc\x80\xcc\x93\xcd\x8a\xcc\x82\xcc\x8b\xcd\xa3\xcc\x8f\xcc\x91\xcc\x8d\xcc\x8a\xcd\x8c\xcd\xa9\xcd\x90\xcc\x8e\xcc\x80\xcd\xa3\xcd\xa3\xcc\x9a\xcd\x9f\xcd\x85h\xcc\x9b\xcd\x8b\xcc\x8f\xcc\x8d\xcc\x86\xcd\xa4\xcd\x9b\xcd\x90\xcd\xa8\xcc\x8c\xcc\x8b\xcd\xa4\xcc\x8e\xcc\x82\xcd\xa8\xcc\x82\xcc\x93\xcc\x91\xcc\x9a\xcc\x95\xcd\x9f\xcd\x8f\xcc\xbb\xcc\xa3\xcd\x96\xcc\x96\xcd\x9a\xcd\x9a\xcd\x93\xcc\xb2\xcc\xbc\xcc\xaa\xc8\x81\xcc\x94\xcc\x85\xcc\xbf\xcd\x90\xcc\x91\xcd\xa1\xcd\x8f\xcc\x9d\xcd\x93\xcc\xae\xcd\x9a\xcc\x98\xcc\xa6\xcc\xb0\xcd\x9a\xcd\x8e\xcd\x94\xcd\x89\xcd\x9a\xcc\xae\xcc\xa0\xcc\x95\xcd\x9c\xcd\x85\xe1\xb9\xb1\xcc\xb1\xcc\xbc\xcc\x96\xcc\x93\xcc\x82\xcd\xad\xcc\x8f\xcc\x85\xcd\x82\xcd\xa5\xcd\x8c\xcd\xaf\xcd\x8c\xcd\xa0s\xcd\xaa\xcc\x93\xcd\xaa\xcc\x84\xcc\x8c\xcc\x93\xcd\xa7\xcd\x8b\xcd\x90\xcd\xac\xcc\x85\xcc\x91\xd2\x89\xcc\xa8\xcc\xaa\xcc\xac\xcd\x8e\xcd\x8d\xcc\xa5\xcc\xac?\xcc\xa1\xcc\xae\xcc\xb3\xcd\x99\xcd\x93\xcd\x94\xcc\xb9\xcc\x98\xcc\xb9\xcd\x93\xcc\x98\xcc\xbb\xcc\xa6\xcc\xa3\xcd\x8e\xcc\xab\xcc\x90\xcd\xa4\xcc\x90\xcd\x9b\xcc\x81\xcd\x9d \xcc\xa7\xcc\xa6\xcc\xbc\xcc\x98\xcd\x95\xcc\xaa\xcc\xa0\xcc\x99\xcd\x96\xcc\xa6\xcc\xaf\xcc\xa6\xcc\x98\xcd\x89\xcd\x88\xcd\x95\xcd\x94\xcc\x98\xcc\xbb\xcc\xb2\xcd\x91\xcd\xa8\xcc\x8a\xcc\x88\xcc\x81\xcc\x90\xcd\xab\xcd\x90\xcc\x8c\xcd\xaf\xcc\x80\xcd\x98\xcd\x9d\xe1\xb8\xa8\xcc\xb7\xcc\xb8\xcc\xb8\xcc\xb9\xcd\x89\xcc\xa9\xcc\x9c\xcc\xb9\xcc\x9e\xcd\xaf\xcc\x83\xcc\x83\xcd\xa7\xcd\xac\xcd\xa8\xcc\x8c\xcc\x80\xcc\xbe\xcc\x90\xcc\x88\xcc\x87\xcd\xa7\xcd\x9b\xcc\x83\xcd\x90\xcc\x80\xcd\xa6\xcd\x9eA\xcc\xb4\xcc\xa6\xcc\x97\xcc\xac\xcc\xa0\xcd\x99\xcc\xad\xcd\x89\xcc\x9f\xcc\xba\xcd\x87\xcc\xad\xcc\xb0\xcd\x94\xcd\x95\xcc\xaf\xcc\x85\xcc\x83\xcd\x8b\xcd\xaa\xcc\x88\xcc\x81\xcc\x89\xcc\x93\xcc\x8c\xcd\xaf\xcc\x88\xcc\x81\xcd\x86\xcc\x8b\xcc\x80\xcd\xa4\xcc\x87\xcc\x82\xcc\xbf\xcc\x88\xcc\x81\xcc\x82\xcd\xa1\xcd\xa1\xe1\xb9\xb0\xcc\xb2\xcd\x8e\xcd\x89\xcc\xa3\xcc\xb3\xcc\xba\xcc\xb1\xcc\x9c\xcc\xa6\xcc\xac\xcd\x95\xcc\xa3\xcd\x89\xcd\x87\xcd\x8a\xcc\x8c\xcd\xa5\xcd\x90\xcd\x92\xcc\x88\xcc\x81\xcc\x93\xcc\x81\xcd\xa5\xcc\x81\xcc\x81\xcc\x8b\xcd\x82\xcc\x85\xcd\xac\xcc\x86\xcd\x97\xcd\xa5\xcc\x95\xcd\xa2\xcd\xa1S\xcc\x8d\xcd\xa7\xcd\x97\xcc\x92\xcd\x97\xcc\x82\xcc\x88\xcd\xac\xcd\x8a\xcc\x9a\xcc\x9a\xcd\xa2\xcd\x8f\xcc\x97\xcc\xa3\xcc\xb3\xcd\x85!\xcc\xb6\xcc\xa8\xcc\xa1\xcd\x87\xcd\x9a\xcc\x99\xcd\x9a\xcc\xad\xcc\xb1\xcc\xa3\xcc\xb2\xcc\xb3\xcc\xa4\xcc\x9e\xcc\xab\xcc\x97\xcc\xa3\xcc\xa6\xcc\xae\xcc\x96\xcc\x9e\xcd\x92\xcd\x86\xcc\xbf\xcc\x84\xcd\x91\xcc\x83\xcc\x8e\xcd\xa1 

Plugging that string into Android we get this:



The diacritical marks go above the top and below the bottom. It is interesting to note that the total width and height are correctly measured by the text bounds, though.

Anyway, for all practical purposes in your programming, you can just assume that the max and min for glyph letters are top and bottom. And usually they will stay within ascent and decent. If for whatever reason you need to know for sure if the letters go beyond top or bottom you can use TextPaint.getTextBounds.
    