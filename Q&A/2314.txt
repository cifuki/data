88
Q:Quoting the documentation for AsyncTask found here, it says: 


  AsyncTasks should ideally be used for short operations (a few seconds at the most.) If you need to keep threads running for long periods of time, it is highly recommended you use the various APIs provided by the java.util.concurrent pacakge such as Executor, ThreadPoolExecutor and FutureTask.


Now my question arises: why? The doInBackground() function runs off the UI thread so what harm is there by having a long running operation here? 
    
===============================================================================================
118
A:It is a very good question, it takes time as an Android Programmer to fully understand the issue. Indeed AsyncTask have two main issues that are related : 


They are poorly tied to the activity life cycle
They create memory leaks very easily.


Inside the RoboSpice Motivations app (available on Google Play) we answer that question in detail. It will give an in-depth view of AsyncTasks, Loaders, their features and drawbacks and also introduce you to an alternative solution for network requests : RoboSpice.
Network requests are a common requirement in Android and are by nature long running operations 
.
Here is an excerpt from the app :

The AsyncTask and Activity life cycle


AsyncTasks don't follow Activity instances' life cycle. If you start an AsyncTask inside an Activity and you rotate the device, the Activity will be destroyed and a new instance will be created. But the AsyncTask will not die. It will go on living until it completes. 



And when it completes, the AsyncTask won't update the UI of the new Activity. Indeed it updates the former instance of the activity that
is not displayed anymore. This can lead to an Exception of the type java.lang.IllegalArgumentException: View not attached to window manager if you
use, for instance, findViewById to retrieve a view inside the Activity.


Memory leak issue


It is very convenient to create AsyncTasks as inner classes of your Activities. As the AsyncTask will need to manipulate the views 
of the Activity when the task is complete or in progress, using an inner class of the Activity seems convenient : inner classes can 
access directly any field of the outer class.



Nevertheless, it means the inner class will hold an invisible reference on its outer class instance : the Activity. 



On the long run, this produces a memory leak : if the AsyncTask lasts for long, it keeps the activity "alive" 
whereas Android would like to get rid of it as it can no longer be displayed. The activity can't be garbage collected and that's a central
mechanism for Android to preserve resources on the device. 




It is really a very very bad idea to use AsyncTasks for long running operations. Nevertheless, they are fine for short living ones such as updating a View after 1 or 2 seconds.

I encourage you to download the RoboSpice Motivations app, it really explains this in-depth and provides samples and demonstrations of the different ways to do some background operations.
    