47
Q:Wondering which one is the better choice to write unit test cases for android apps and libraries: Using Robolectric library or sticking with Android Testing framework. I want to run test suite at commandline and want it be independent of need of configuring emulator or letting a device attached with build machine. Does anyone of you run a comparative analysis on both of these or something better? Your experiences will be great help me to decide on the better solution.
    
===============================================================================================
97
A:I use a tiered system, where I prefer earlier tiers where possible:


Pure unit tests.  I try to make as much code as possible fully independent of Android APIs, and then use "pure" unit tests which can run on any JVM.  These tests are the fastest, and it helps keep code that has no need to be Android-specific portable.
Robolectric-supported unit tests.  Where my code has only small dependencies on Android APIs, that can be satisfied by Robolectric shadows, I test it with Robolectric.  There is a little more setup time for Robolectric compared to pure tests, but it's still faster than starting/running on an emulator.
Android framework tests.  Where Robolectric doesn't cut it - either because the shadows don't exist, or because I'm heavily using Android APIs (and therefore want to test against the Real Thing) - I write test that run on the emulator/device with the default framework.


The point of the tiers is to keep things as simple as possible, which keeps the full suite faster and helps promote cleaner code.
    