42
Q:My Android application includes an SQLite database with an SQLiteOpenHelper class to help manage it.  During application use, the user may perform some operations such as adding/deleting/updating etc on the database.  

At some points the size of the operation will be known, like this:


user clicks button to save item
the SQLiteDatabase performs a single insert query
user continues using app


At other areas of the app, the operation may be large, like inserting 10+ items into the database all at once.

Questions: 


should I thread simple operations like inserting/updating/deleting/viewing 1 item?
will it take longer to insert 1 item into a table which contains many items(like 30+) than it would take to insert into a table with no items?
if i don't need to thread such simple operations, at what point do you suggest i start threading them?


when i say thread i mean using a thread that is not the main UI thread.

edit: I realize that small operations do not take much time and i could very well get away with doing them on the main thread. I am just concerned that it would be bad practice to be executing them on the main thread and would like clarification!
    
===============================================================================================
43
A:General rule for everything: If it's fast enough, do it on the main thread. If not, use a worker thread.

Unless you have a ridiculously huge database, a single operation almost never warrants a separate thread. Databases in general are designed to scale well, but of course a very big database (10,000+ rows?) will be a bit slower than a small one. 30 rows, however, is nothing.

I would start threading stuff if you have a lot of operations going on, like a bunch of queries, or complicated queries that span several tables.

As with everything - profile your app, and if it's too slow, optimize. Don't write an awesome synchronized super-duper multi-core-ready database handler if none of your queries takes longer than 2ms.
    