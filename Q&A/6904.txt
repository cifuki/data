37
Q:So I have an Activity (say TestActivity) which needs to act as a normal unthemed Activity as well as a Theme.Dialog at other place. I am trying to reuse same TestActivity for both the tasks.

All I am looking for setting the theme dynamically.
The code is simple:
Here is my activity's onCreate that works with a black background

public void onCreate(Bundle icicle) {
    if (Utility.isDialog == true)
        setTheme(android.R.style.Theme_Dialog);
    super.onCreate(icicle);
    requestWindowFeature(Window.FEATURE_NO_TITLE);
.....


and here is the Manifest Entry

<activity android:name=".TestActivity"/>


And in the meantime I found a post that says it can't be done here is the post http://code.google.com/p/android/issues/detail?id=4394 .But there is a strong feeling that it can be done.

All suggestions are welcome.
    
===============================================================================================
54
A:Would like to give a work around for this problem.

Problem : How to use the same activity as both dialog and full screen based.

Solution : 


Define your activity in your AndroidManifest.xml with the theme @android:style/Theme.Dialog
In your respective .Java file, check for an intent extra that defines dialog mode. 
If it does not exist, set the Theme to android.R.style.Theme. This is the default theme which is applied if you do not define any theme.


Code :

boolean fDialogMode = getIntent().hasExtra("dialog_mode");

if( ! fDialogMode ) {
    super.setTheme(android.R.style.Theme);
}


Alternate Solution:

A more complex solution is to use AlertDialog as below:


Define a ListAdapter class extended from ArrayAdapter. 
return 1 in getCount function

@Override
public int getCount() { return 1; }

In the getView function, inflate the layout of the activity you need and do any customization before returning the view.

@Override
public View getView( int position, View view, ViewGroup group ) {
    View v = view;
    if( v == null ) {
        v = getSystemService(Context.LAYOUT_INFLATER_SERVICE).inflate( <layout res id>, null );
    }

... Do any customization here    ....

      return v;
}



This is definitely a second choice option by if you are not doing too much processing in the activity class this could be an option.

Only reason to consider this solution could be that the logic to show it in a dialog is isolated to the places where it is used as a dialog.

Both the options worked for me but for obvious reasons I am taking the first option. :-)
    