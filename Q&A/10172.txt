27
Q:I want to implement a feature-based alignment algorithm using the ORB feature detector and extractor.
So far, I extracted the features using ORB class from OpenCV
ORB orb;
 orb(gray_image,Mat(),features.keypoints,features.descriptors);
and matched them using the knnMatch function from openCV matcher.knnMatch(features1.descriptors, features2.descriptors, pair_matches,2);
After that I am trying to find a homography using findHomography function, but this function needs at least 4 matches between the image features, and on most of the images i tested I got less than 4.

Has anybody used this feature? Is there any documentation about it, or about the ORB class from OpenCV(the meaning of the ORB constructor parameters)?

P.S. This is my first question. and I can't post more than 2 links. For opencv documentation use this.
    
===============================================================================================
48
A:UPDATE: Now it is in the OpenCV documentation, here:
  http://opencv.itseez.com/modules/features2d/doc/feature_detection_and_description.html#orb 


A detailed description of the algorithm is found here: http://www.willowgarage.com/sites/default/files/orb_final.pdf



It is not mentioned in OpenCV documentation but actually OpenCV has:

Two types of descriptors:


float descriptors:

SIFT
SURF 

uchar descriptors:

ORB
BRIEF 



And corresponding matchers:


for float descriptors:

FlannBased
BruteForce<L2<float> >
BruteForce<SL2<float> > //since 2.3.1
BruteForce<L1<float> >

for uchar descriptors:

BruteForce<Hamming>
BruteForce<HammingLUT>
FlannBased with LSH index //since 2.4.0



So you need to modify your code to use for example BruteForce<Hamming> matcher for ORB descriptors. It is possible to use L2 or L1 distance for matching uchar descriptors but results will be incorrect and findHomography returns unsatisfactory results.
    