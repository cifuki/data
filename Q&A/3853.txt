60
Q:So I have come across this best practices on Android articles on memory performance.

http://developer.android.com/training/articles/memory.html

They said


  Avoid dependency injection frameworks
  
  Using a dependency injection framework such as Guice or RoboGuice may
  be attractive because they can simplify the code you write and provide
  an adaptive environment that's useful for testing and other
  configuration changes. However, these frameworks tend to perform a lot
  of process initialization by scanning your code for annotations, which
  can require significant amounts of your code to be mapped into RAM
  even though you don't need it. These mapped pages are allocated into
  clean memory so Android can drop them, but that won't happen until the
  pages have been left in memory for a long period of time.


But what about Dagger which they claim to be fast. Not sure which one should I go for?
    
===============================================================================================
37
A:This recommendation does not apply equally to all dependency injection frameworks.


  ..frameworks [that work like Guice] tend to perform a lot of process initialization by scanning your code for annotations, which can require significant amounts of your code to be mapped into RAM even though you don't need it..


Thus, if using a DI/IoC framework that doesn't scan for said [run-time] annotations, implying the [excessive] use of reflection, then this reason doesn't apply. While Dagger does use annotations these are used differently than by Guice1 and avoid the problem stated.

Since Dagger was written as "A fast dependency injector for Android and Java", the authors have designed it for this purpose and believe that it is suitable for such a target - go ahead, give it a try.



1 Dagger uses compile-time annotations (well, mostly) instead of relying on run-time annotations and reflection; it is the run-time annotation scanning and reflection that causes the issue the memory guide was warning about.
    