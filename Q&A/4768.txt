50
Q:I have two fragments. The first with buttons inside, the other with a ListView inside (ListFragment). 

I would like the first fragment (thanks to its buttons) to allow the user to browse the ListView which is in the second fragment.

So I want the ListView to be controlled by the first fragment with buttons.

I've no problem communicating between fragment (sending orders from 1st fragment to the 2nd), but I don't know how to tell my ListView to select (programmatically) a particular list item.

What kind of ListView should I use and how can I tell the ListView to Select/Highlight/Focus one of its items?

I am in touch mode as the user presses on the buttons of the 1st fragment.

Should I use setFocusableInTouchMode(true) or setChoiceMode(ListView.CHOICE_MODE_SINGLE) or something else?
    
===============================================================================================
135
A:This is for everyone trying to :

-Select programmatically an Item in a ListView

-Making this Item stay Highlighted

I'm working on Android ICS, I don't know if it works for all levels Api.

First create a listview (or get it if you're already in a listActivity/listFragment)

Then set the choice mode of your listview to single with :Mylistview.setChoiceMode(ListView.CHOICE_MODE_SINGLE);

Then select programmatically your item with :Mylistview.setItemChecked(position, true); (position being an integer indicating the rank of the item to select)

Now your item is actually selected but you might see absolutely nothing because there's no visual feedback of the selection. Now you have two option : you can either use a prebuilt listview or your custom listview.

1) If you want a prebuilt listview, give a try to simple_list_item_activated_1, simple_list_item_checked , simple_list_item_single_choice, etc... 

You can set up your listview like this for e.g : setListAdapter(new ArrayAdapter<String>(this, R.layout.simple_list_item_activated_1, data))

following which prebuilt listview you chose you'll see now that when selected you have a checkbox ticked or the backgound color changed , etc...

2) If you use a custom listview then you'll define a custom layout that will be used in each item. In this XML layout you will attribute a selector for each part view in you row which need to be changed when selected.

Let's say that when selected you want your row to change the color of the text and the color of the background. Your XML layout can be written like :

<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:background="@drawable/menu_item_background_selector"
    android:orientation="horizontal" >

<TextView
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:gravity="center_vertical"
    android:textColor="@drawable/menu_item_text_selector" />




Now, in the drawable folder you create menu_item_background_selector.xml and menu_item_text_selector.xml.

menu_item_text_selector.xml :

 <?xml version="1.0" encoding="utf-8"?>
<selector
xmlns:android="http://schemas.android.com/apk/res/android">

<item android:state_activated="true"
     android:color="#FFF">
</item>

<item android:state_pressed="true"
     android:color="#FFF">
</item>

<item android:state_pressed="false"
     android:color="#000">
</item>

</selector>


The text will be white when selected.

Then do something similar for your background: (remember that you're not forced to use color but you can also use drawables)

menu_item_background_selector.xml :

<?xml version="1.0" encoding="utf-8"?>
<selector
xmlns:android="http://schemas.android.com/apk/res/android">


        <item android:state_activated="true"
        android:color="#0094CE">
        </item>

        <item android:state_pressed="true"
        android:color="#0094CE">
        </item>

        <item android:state_pressed="false"
        android:color="#ACD52B">
        </item>


      </selector>


Here the background is blue when selected and green when it is not selected.

The main element I was missing was android:state_activated. There's indeed (too) many states : activated,pressed,focused,checked,selected...

I'm not sure if the exemple I gave with android:state_activated and android:state_pressed is the best and cleanest one but it seems to work for me.

But I didn't need to make my own class in order to get a Custom CheckableRelativeLayout (which was dirty and scary) nor I used CheckableTextViews. I don't know whyothers used such methods, it maybe depends on the Api level.
    