47
Q:I'm attempting to write some tests using the built-in android Junit testing framework.  I am running into a problem with a test where I am expecting an exception to be thrown.  In JUnit, the annotation for the test method would be: 

@Test(expected = ArithmeticException.class)

However, in Android, this test fails with an ArithmeticException.

I understand that the Android implementation is only a subset of JUnit 3, and doesn't even allow the annotation @Test (must be @SmallTest, @MediumTest, or @LargeTest, and none of those allow for the 'expected=..' parameter), but this seems like a fairly significant test, and seems like the Android testing framework would be seriously lacking if it did not have this feature.

Note :  I tested this by adding the JUnit jar to the project and by adding and the annotations to my test methods.  It makes sense to me why the annotations would be completely ignored because the Android framework (runner?) is not looking for that annotation and just ignores it.  Basically, I'm just looking for the 'right' way to do this within the framework. 
    
===============================================================================================
66
A:The standard junit 3 idiom for this sort of test was:

public void testThatMethodThrowsException()
{
  try
  {
    doSomethingThatShouldThrow();
    Assert.fail("Should have thrown Arithmetic exception");
  }
  catch(ArithmeticException e)
  {
    //success
  }
}

    