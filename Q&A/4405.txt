54
Q:What is the "correct" way to return the values to the calling activity from a complex custom dialog - say, text fields, date or time picker, a bunch of radio buttons, etc, plus a "Save" and "Cancel" button?

Some of the techniques I've seen on the web include:


public data members in the Dialog-derived class which can be read by the Activity
public "get" accessors . . . " . .  "  . . "
Launching the dialog with an Intent (as opposed to show() ) plus handlers in the Dialog class which take input from the various controls and bundle them up to be passed back to the Activity so when listener hits "Save" the bundle is passed back using  ReturnIntent()
Listeners in the Activity which process input from the controls that are in the dialog e.g., so the TimePicker or DatePicker's listeners are really in the Activity.  In this scheme practically all the work is done in the Activity
One Listener in the Activity for the "Save" button and then the Activity directly interrogates the controls in the dialog; the Activity dismisses the dialog.


...plus more that I've already forgotten.  

Is there a particular technique that's considered the canonically correct or "best practice" method?
    
===============================================================================================
4
A:I'm using following way:


All my activities has one and the same parent Activity (let's say ControlActivity). ControlActivity has private volatile Bundle controlBundle; with appropriate getter/setter
When I start dialog, I used to call dialog thru my own method:

public void showMyDialog(int id, Bundle bundle)
{
    this.controlBundle=bundle;
    this.showDialog(id, bundle);
}



So each time I know parameters sent to dialog


When dialog is about to complete, I'm forming in dialog another Bundle with necessary values and then put them thru my Activity bundle setter:



((ControlActivity )this.getOwnerActivity).setControlBundle(bundle);


So in the end when dialog finishes I know value "returned" from dialog. I know that it's not like int retCode=this.showMyDialog(); it's a bit more complex, but it's workable.
    