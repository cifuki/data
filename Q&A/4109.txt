57
Q:For example, Java Swing and Android UI both use a single threaded model where a single UI thread is responsible for updating all the UI. What made the framework designers chose one thread model over the other?

Wouldn't multiple threaded UI model potentially give you more performance albeit at the cost of more complexity? I realize that the latter is a big deal because thread related bugs are nasty but I am wondering if there are any other advantages to single-threaded model other than simplicity? 
    
===============================================================================================
39
A:What made the framework designers chose one thread model over the other?


From the horse's mouth:


  AWT was initially exposed as a normal
  multi-threaded Java library. But as
  the Java team looked at the experience
  with AWT and with the deadlocks and
  races that people had encountered, we
  began to realize that we were making a
  promise we couldn't keep.
  
  This analysis culminated in one of the
  design reviews for Swing in 1997, when
  we reviewed the state of play in AWT,
  and the overall industry experience,
  and we accepted the Swing team's
  recommendation that Swing should
  support only very limited
  multi-threading.


(Read the whole article, it explains the decision in great detail and states that the exact same problems and eventual move to a single-threaded model had even occured earlier at Xerox PARC - the place where almost everything we consider bleeding edge modern in CS was invented 30 years ago)


  Wouldn't multiple threaded UI model
  potentially give you more performance
  albeit at the cost of more complexity?


Absolutely not, because drawing the GUI and processing user actions (which is everything the UI thread needs to do) is not going to be the bottleneck in any sane 2D application.
    