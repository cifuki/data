44
Q:I know that usage of static variables on Android is quite risky, especially if you reference them to activities. However, if I have a class that extends Application (let's call this class "App"), is it safe to reference to the instance of this class?

If so, is it also safe for any other class to have any kind of reference to the application context? I mean, can there be a memory leak if I have a reference to the application context in any kind of class?

The purpose is that no matter in which scope I am in, I can always get a reference to the application context. I think it's safe, since if the system closes the application, the static variable is also gone till the next time the application starts again, which will initialize the static variable again.

Also, not that it matters much, but if I use multiple processes, will I get totally different references to App class on each process?

As an example of code, here's what I'm thinking about:

public class App extends Application
{
    private static Context _appContext;

    @Override
    public void onCreate()
    {
        super.onCreate();
        _appContext = this;
    }

    public static Context getAppContext()
    {
        return _appContext;
    }
}

    
===============================================================================================
28
A:is it safe to save the app context to a static variable?


Presently, yes, it appears to be safe, though I would not have getAppContext() return Context, but instead return App or Application.

That being said, the fact that the core Android team did not set it up this way in the first place suggests that perhaps there may be hidden issues of which we are unaware, or that in the future this approach may introduce problems.

As the acronym of the saying goes, YMMV. :-)



EDIT


  if so , is it also safe for any other class to have any kind of reference to the application context ?


I have no idea what you mean by "safe" here.


  but if i use multiple processes , i will get totally different references to App class on each process , right?


If you use multiple processes, you should be slapped with a trout. But, yes, you should get distinct App instances per process.
    