32
Q:I am planning to develop an mobile app (my first one) for multiple operation systems (including Android, IOS, WindowsPhone) - in the wild internet I found a framework called phonegap, as a possibility solution to minimize the development process. 
I understand the advantages phonegap has - but could not find real downsides... 
1.) So the question is why should I not use phonegap?

2.) Is phonegap only slower, because it is wrapped inside the OS, if yes how much slower? I mean can you really tell the differentce between a native app and phonegap, or is only slower when you need hardware acceleration e.g. for gaming? 

A few more informations about the project. Currently I have several '.Net' services and provider, communicating via WCF. The App should be able to receive and send video streams and audio data from and to a service, such as a provider would do.

3.) Is it possible to use phonegap for that, or shall I stick to native apps?
    
===============================================================================================
40
A:All cross-platform frameworks (including HTML) generally share the same advantages and disadvantages.

Advantages:


Write code once that works the same on every target platform.


Disadvantages:


The way it works is often not that wonderful.
Generally lower performance than native implementations.
Some also have their own widget set that looks out of place.
Due to individual platform quirks, you still have to test everywhere.
You get lowest-common-denominator access to features.  When a native feature is supported, often you can only access it in one way: the portable framework's way.  This is sometimes at odds with the target platform's preferred way.
In the event that you may access features unique to a target platform, you lose run-everywhere portability.
Every so-called "cross-platform" framework is a platform in its own right. See earlier point about quirks:  Now, instead of having to know N platforms, you have to know N+1.


For best results targeting multiple platforms, I recommend the following:

Design your core logic (the part that doesn't use any UI) cleanly, with a well-defined API. Make it general enough to be fairly easily ported between environments.  (Is SQLite really that different in Objective C vs. Java?)

Design your UI following the best practices of your target platforms so that it looks great (and fits in) on each one.  (For Android, see http://developer.android.com/design)  Have the UI interact with the core logic via the API you created.
    