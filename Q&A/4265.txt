55
Q:I'm wondering when should I use handler.post(runnable); and when should I use 
new Thread(runnable).start();

It is mentioned in developers documentation for Handler:


  Causes the Runnable r to be added to the message queue. The runnable
  will be run on the thread to which this handler is attached.


Does this mean if I write in the onCreate() of Activity class:

Handler handler = new Handler();
handler.post(runnable);


then runnable will be called in a separate thread or in the Activity's thread?
    
===============================================================================================
82
A:You should use Handler.post() whenever you want to do operations in the UI thread.

So let's say in the callback (which is running in separate thread) you want to change a TextView's text, you should use Handler.post().

In Android, as in many other UI frameworks, UI elements (widgets) can be only modified from main thread.



Edit: the example of long-running tasks

mHandler = new Handler();

new Thread(new Runnable() {
  @Override
  public void run () {
    // Perform long-running task here
    // (like audio buffering).
    // you may want to update some progress
    // bar every second, so use handler:
    mHandler.post(new Runnable() {
     @Override
     public void run () {
       // make operation on UI - on example
       // on progress bar.
     }
    });
  }
}).start();


Of course, if the task you want to perform is really long and there is a risk that user might switch to some another app in the meantime, you should consider using a Service.
    