32
Q:I was a JaveEE developer. Recently I joined an Android development team. The structure of Android confused me. The MVC design pattern doesn't seem to suit for Android development. So what is the design pattern principle for Android development? I mean is there any hint about how to write a clean, easy reading and effective Android code. 
    
===============================================================================================
53
A:Android's architecture annoyed me at first, but I beginning to see a method to their madness.  It's poorly explained by the android documentation.  My biggest gripe has always been that it's hard to have a centralized data model with objects that your Activities share just like a normal application.  Android seemed to want me to be a nomad because I could only share primitives between my Activities.  And dropping junk in a database is NOT a model because it contains no behavior.  So as most people my business logic all ends up in my activity making it hard to share business logic in other activities.

I've come to find out I was missing some key puzzle pieces.  Android is MVC.  However, it's coupled to the View fairly heavily.


Activity == Controller
Model == Subclass of Application
Anything that subclasses View == View


Interestingly you can create a subclass of Application and declare this in your Manifest file, and Android will create a single instance of this object that lives the length of your application no matter what Activity is destroyed or created.  That means you can build a centralized data model there that all Activities have access to.  

The way I see this is something like a primitive Spring container that you can initialize objects and resolve dependencies between them.  That way you can decouple the model portion of your application away from the Activity themselves.  And just have the Activity make calls on the model, and hand callbacks to receive the results so it can update the UI.

The problems with Android is that it mixes controller and view pretty heavily.  For example, subclasses like TabActivity, ListActivity imply a certain view being used.  So swapping out a view is pretty involved.  Also the Controller makes very specific assumptions about what the view is even if you use Activity.  He contains direct references to UI objects like TextView, etc.  And it registers for low level events like clicks, keyboard, etc.

It would be better if Activity could register for more high level events like "Login", "Update Account Balance", etc which the view would dispatch in response to a series of clicks, keyboard, touch events.  That way the controller works at the level you might describe features instead of design features.

I think we'll reach this type of design eventually as we better understand come up with better tools and techniques.  It seems like Android might have the extensibility to make this happen, but it's up to community to chart it.
    