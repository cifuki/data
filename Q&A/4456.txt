53
Q:I was going through the services documentation in android when I noticed two contradicting points:

In the services document it is specified in Managing the Lifecycle of a Service


  These two paths are not entirely separate. That is, you can bind to a
  service that was already started with startService(). For example, a
  background music service could be started by calling startService()
  with an Intent that identifies the music to play. Later, possibly when
  the user wants to exercise some control over the player or get
  information about the current song, an activity can bind to the
  service by calling bindService(). In cases like this, stopService() or
  stopSelf() does not actually stop the service until all clients
  unbind.


But in the document about bound services in Managing the Lifecycle of a Bound Service


  However, if you choose to implement the onStartCommand() callback
  method, then you must explicitly stop the service, because the service
  is now considered to be started. In this case, the service runs until
  the service stops itself with stopSelf() or another component calls
  stopService(), regardless of whether it is bound to any clients.


It may be me but I think the statements are contradictory.Could anyone please clarify...
    
===============================================================================================
54
A:Actually, both paragraphs complement each other (although their wording might be misguiding), and both paragraphs are consistent with the image from the documentation. Let's have a look: 


  These two paths are not entirely separate. That is, you can bind to a service that was already started with startService(). For example, a background music service could be started by calling startService() with an Intent that identifies the music to play. Later, possibly when the user wants to exercise some control over the player or get information about the current song, an activity can bind to the service by calling bindService(). In cases like this, stopService() or stopSelf() does not actually stop the service until all clients unbind.


The quintessence is: If you start a service, then bind a client to it, then try to stop it, the service is not stopped (destroyed) before all clients unbind. The second paragraph does not contradict, it refines this statement. 


  However, if you choose to implement the onStartCommand() callback method, then you must explicitly stop the service, because the service is now considered to be started. In this case, the service runs until the service stops itself with stopSelf() or another component calls stopService(), regardless of whether it is bound to any clients.


This means: A started and bound service runs even if no clients are bound to it until it is explicitely stopped. Granted, the wording might probably be a bit clearer on this. The lifecycle diagram given in the documentation however shows this (and I am pretty sure I already observed this in "real-life", although I am currently have no direct example on top of my head):


    