32
Q:The justification that I've seen for shall we say "Bastardizing" the Java bytecodes in Android was performance.  (I suspect there is another reason.)  However by changing the byte codes haven't they made hardware acceleration technologies such as Jazelle moot, and thus actually degraded the performance available for a Mobile Java platform?

It appears counter intuitive to me knowing that the target platform is a ARM based mobile platform.  While it MIGHT give you better performance on other CPU architectures it seems to spit in the face of ARM and Jazelle.

What sort of quantitative effect does it have on Java performance?

Does it actually improve performance, and if so how?

What's the effect on other platforms? (i.e. x86,mips,yadda,yadda,yadda...)
    
===============================================================================================
18
A:Yes Dalvik makes Jazelle useless. The only question is was Jazelle useful to begin with or is it 90% marketing hype?  A good JIT or AOT(ahead of Time) compiler tends to give much better performance than trying to use specialized instructions. The register based approach of Dalvik might be faster than a traditional java bytecode interpreter but if the difference in minor between that of an interpreter and that of a JIT. Hopefully one of the next versions of Android has a JIT.

It takes ~5-10 years to write a good virtual machine with state of the art garbage collectors and optimizers. Sun (and Microsoft) have spent those years. Google hasn't. Hopefully they will keep investing in it so that one day Android Java code isn't a 90% slower than it should be.
    