56
Q:I use an async task to upload an image and get some results.

While uploading the image I see a progress dialog, written in onPreExecute() method like this:

    protected void onPreExecute() { 
         uploadingDialog = new ProgressDialog(MyActivity.this); 
         uploadingDialog.setMessage("uploading"); 
         uploadingDialog.setCancelable(true);
         uploadingDialog.show();
    }


Ok when I press the back button, obviously the dialog disappears because of the setCancelable(true).

But (obviously) the async task doesn't stop.

So how can I fix this? I want to cancel both dialog and async task when I press the back button. Any ideas?

EDIT: FOUND THE SOLUTION. SEE MY ANSWER BELOW.
    
===============================================================================================
101
A:From SDK:


  Cancelling a task
  
  A task can be cancelled at any time by invoking cancel(boolean). 
  Invoking this method will cause subsequent calls to isCancelled() 
  to return true.  
  After invoking this method, onCancelled(Object), instead of 
  onPostExecute(Object) will be invoked after doInBackground(Object[]) returns. 
  To ensure that a task is cancelled as quickly as possible, 
  you should always check the return value of isCancelled() periodically from 
  doInBackground(Object[]), if possible (inside a loop for instance.)


So your code is right for dialog listener:

uploadingDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {
    public void onCancel(DialogInterface dialog) {
        myTask.cancel(true);
        //finish();
    }
});


Now, as I have mentioned earlier from SDK, you have to check whether the task is cancelled or not, for that you have to check isCancelled() inside the onPreExecute() method.

For example:

if (isCancelled()) 
    break;
else
{
   // do your work here
}

    