32
Q:This is first time I have to write unit test cases in Android.

So I have searched lots of things.


Robolectric framewordk - Runs on JVM
Mockito Framwork - Mocking objects


So I have some doubts in Robolectric & Mokito.


Should I have to use Robolectric only with JUnit in Android app?
Should I have to use Mockito only with JUnit in Android app?
Should I have to go with both framework?
What is the difference between Mockito & Robolectric?


I have search for difference between Mokito & Robolectric but don't get any proper answer for that.

Please suggest.
    
===============================================================================================
41
A:They have slightly different usages and I tend to use both in my projects.

Mockito 

is used for making mocks of your classes.  

When you are testing a particular class you mock all of its dependencies with Mockito.

Where possible most of your tests should use mockito.  To make this possible most people split their code up into MVP, etc where the business logic is separated from the View logic.  This way your business logic (Presenter) has no knowledge (or dependencies) on the Android library and has no need to have mocks of them.

Robolectric 

is a library which contains many mocks of Android classes.

The Robolectric test runner injects these 'shadow objects' in place of the actual Android classes when the tests are run.  This is what allows the tests to run on the JVM without booting up an instance of Android.

When using MVP your View layer tends to be implemented by the Activity/Fragment and this is where you can use Robolectric to mock these.

Notes

Use Robolectric only where necessary.  It basically re-implements parts of the Android framework but not always in exactly the same way.  

You may also need another library such as PowerMock.  This allows the mocking of static classes such as Math or can be used to mock static Android classes such as TextUtils.

Both are used with JUnit
    