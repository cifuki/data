40
Q:My app needs to grab some data from the web at a specific time each day. So I use an AlarmManager to schedule the task and that works ok.

But when looking at various examples there seems to be two ways to deal with the AlarmManager when it comes to the pending intent.

One uses PendingIntent.getBroadcast() to call a broadcast receiver when the alarm goes off and inside that receiver the service to do the real work is started.

Another approach is to use PendingIntent.getService() and call the service directly when that alarm goes off.

Can someone explain to me the difference between the two approaches so I can decide on which one to rely?

EDIT: One more question is where to acquire the wake lock when using getService()?

For example, when using a BroadcastReceiver I have the following line in onReceive():

WakeReminderIntentService.acquireStaticLock(context);


How should I acquire the wake lock if I instead call the service directly like:

PendingIntent pi = PendingIntent.getService(this, 0, new Intent(this, OnAlarmReceiver.class), PendingIntent.FLAG_UPDATE_CURRENT);


Should I simply acquire it from within the service instead?
    
===============================================================================================
19
A:One uses PendingIntent.getBroadcast() to call a broadcast receiver when the alarm goes off and inside that receiver the service to do the real work is started.

it has one more step in starting service than

Another approach is to use PendingIntent.getService() and call the service directly when that alarm goes off.

then you should use the second approach as it is reducing your one step in execution..
    