37
Q:I have an Android library project that I would like to use from within another Android project.

The library has a Activity declared in its AndroidManifest.  When I try the following within the second project:

        Intent intent = new Intent(this, ReaderActivity.class);
        startActivity(intent);


I get the following exception:

 java.lang.RuntimeException: Unable to start activity ComponentInfo{br.com.digitalpages.reader.demo/br.com.digitalpages.reader.demo.ReaderDemoActivity}: android.content.ActivityNotFoundException: Unable to find explicit activity class {br.com.digitalpages.reader.demo/br.com.digitalpages.reader.ReaderActivity}; have you declared this activity in your AndroidManifest.xml?
     at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2663)
...
 Caused by: android.content.ActivityNotFoundException: Unable to find explicit activity class {br.com.digitalpages.reader.demo/br.com.digitalpages.reader.ReaderActivity}; have you declared this activity in your AndroidManifest.xml?
     at android.app.Instrumentation.checkStartActivityResult(Instrumentation.java:1404)
     at android.app.Instrumentation.execStartActivity(Instrumentation.java:1378)
...


How can I open the Activity from the another project?

EDIT:
By users answers I added the following line into my second project

<uses-library android:name="br.com.digitalpages.reader" android:required="true" />


But it's still doesn't works
    
===============================================================================================
36
A:I believe you must include the <activity> in your own AndroidManifest.xml -- I don't think it gets picked up from a library. I don't have my reference for that handy.

Update: It's official solution. From the doc:


  Declaring library components in the manifest file
  
  In the manifest file of the application project, you must add
  declarations of all components that the application will use that are
  imported from a library project. For example, you must declare any
  <activity>, <service>, <receiver>, <provider>, and so on, as well as
  <permission>, <uses-library>, and similar elements.
  
  Declarations should reference the library components by their
  fully-qualified package names, where appropriate.

    