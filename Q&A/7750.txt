34
Q:I have a custom View that runs a Thread operation which sits around making calls to the interwebs periodically.  I would like to know if there's a way for me to not have to kill that thread from the parent Activity (onPause) so that the Thread isn't milling about in the background after the Activity has been backgrounded (and/or killed).

The intention here is for the custom View to be self sufficient and not need additional handling from the Activity.  The way to do that would be for it to listen for when its parent was backgrounded and for it to then let the infinite sleep loop in the Thread expire. I'm not seeing a way to do that, but am hoping that I'm overlooking something.
    
===============================================================================================
13
A:Not unless you notify it directly.

For your purpose, override View.onDetachedFromWindow() and relinquish your Thread there.  Then, when the view is visible again, spin the Thread back up in View.onAttachedToWindow().  The problem with onPause() and onResume() is that you can still have a view that's visible on screen, but is attached to a paused Activity.  An example of when this can happen is if you have one Activity in a window that overlays another.

Or, as william gouvea suggests, a Fragment might be better suited for your purpose since it already has the life-cycle hooks for pause and resume, and anything that talks to the network really falls in the controller realm anyway.
    