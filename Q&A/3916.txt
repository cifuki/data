59
Q:I tried googling it and there is no direct and/or clear cut answer.

The developer website's definition is not clear either:


  The interface that apps use to talk to the window manager. Use
  Context.getSystemService(Context.WINDOW_SERVICE) to get one of these.


Can someone with plain 6th grade English explain what it is?

And how can I use it to create a floating object that remains via several activties, even though I moved from one to the other?
    
===============================================================================================
126
A:The Android WindowManager is a system service, which is responsible for managing the z-ordered list of windows, which windows are visible, and how they are laid out on screen.  Among other things, it automatically performs window transitions and animations when opening or closing an app or rotating the screen.

Every activity has a Window that is used to display its content on the screen.  When you call setContentView on an activity, it attaches that view to the activity's default window.  The default window fills the screen, so that your activity's window hides any other activities -- the WindowManager will display whichever window is on top.  So normally you don't need to worry about windows - you just create an activity and Android will do the rest for you.

But you need to interact with the WindowManager if you want to do something unusual like create floating windows that don't fill the screen.  If you want to create a floating window that is visible in front of other applications, you can't use an activity because your activity will stop when another app comes to the foreground, and its window will be hidden or destroyed.  Instead you need to display a window from a background service.  For example:

WindowManager.LayoutParams p = new WindowManager.LayoutParams(
    // Shrink the window to wrap the content rather than filling the screen 
    WindowManager.LayoutParams.WRAP_CONTENT,
    WindowManager.LayoutParams.WRAP_CONTENT,
    // Display it on top of other application windows, but only for the current user
    WindowManager.LayoutParams.TYPE_SYSTEM_ALERT,
    // Don't let it grab the input focus
    WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
    // Make the underlying application window visible through any transparent parts
    PixelFormat.TRANSLUCENT);

// Define the position of the window within the screen
p.gravity = Gravity.TOP | Gravity.RIGHT;
p.x = 0;
p.y = 100;

WindowManager windowManager = (WindowManager)getSystemService(WINDOW_SERVICE);
windowManager.addView(myView, p);


For this to work, you will need to add the following permission to your AndroidManifest.xml

<uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>

    